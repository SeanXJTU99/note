p444 exception
12章：
异常概念
【体系图】
常见异常
【异常处理】
自定义异常
throw throws


package exceptions;

public class Exception01 {
    public static void main(String[] args) {
        int n1 = 10;
        int n2 = 0;
        try {
            int res = n1 / n2;
        } catch (Exception e) {
//            e.printStackTrace();
            System.out.println(e.getMessage());//输出异常的出现原因
        }
        //程序抛出异常ArithmeticException
        //程序退出，崩溃了
        //这样不好，健壮性太差，一个不算致命的错误导致程序崩溃
        //利用java异常处理机制解决
        //使用try-catch
        System.out.println("程序继续运行");
    }
}


选中代码块，ctrl + alt + t
try/catch

若进行了异常处理，那么即便出现了异常，程序可以继续，而不是直接崩溃


p445
两大类：
Error：JVM无法解决的严重问题 StackOverflowError 栈溢出
                           Out Of Memory    内存不足
Exception：因编程或偶然因素导致的一般性问题，可以使用针对性代码处理
      空指针访问
      读取不存在的文件
      网络连接中断
   1.运行时异常
   2.编译时异常


p446 【异常体系图】
类 Throwable
接口 Serializable
子类 Error，Exception



Error:
      StackOverflowError
      OutOfMemoryError
Exception: 
      RuntimeException:
            NullPointerException           空指针
            ArithmeticException             算术
            ArrayIndexOutOfBoundException 数组越界
            ClassCastException            类型转换
            NumberFormatException         数字格式
      编译时异常：
            FileNotFoundException         文件不存在
            ClassNotFoundException        类不存在



p447 五大常见异常

1.空指针异常
在需要对象的地方使用null，
即还未创建对象就使用
        String name = null;
        System.out.println(name.length());


2.算术异常

3.数组下标越界异常
int[] arr = {1,2,4};
        for (int i = 0; i <= arr.length; i++) {
            System.out.println(arr[i]);
        }



4.类型转化异常
强转为不是子类的

public class ClassCast {
    public static void main(String[] args) {
        A b = new B();
        B b2 =(B)b;
        C c2 =(C)b;
    }
}
class A{}
class B extends A{}
class C extends A{}



5.数字格式不正确

public class NumberFormat {
    public static void main(String[] args) {
        String name1 = "Hello";
        int num1 = Integer.parseInt(name1);、//Hello不可能转为数字
        System.out.println(num1);
    }
}



p448 课堂练习


p449 异常处理

处理方式
1.try-catch
程序员在捕获后自行处理
2.throws
抛出异常，交给调用者处理，最顶级处理者是JVM

try-catch:
try{
代码
}catch(Exception e){

}finally{
}
当异常发生时系统将异常封装程Exception对象e，传递给catch
最后由程序员自己处理
不管try中是否发生异常，finally始终会执行
通常将释放资源的代码放在finally中，关闭文件，断连数据库
若未发生异常，catch不执行

throws：
JVM调用main方法
      main调用f1
            f1调用f2
                f2抛出异常 throws
            f1t-c-f/throws
      main：t-c-f或者throws
JVM；？？输出异常信息，中断程序
      
  若无try-catch，默认throws（隐含代码）



p450 try-catch 处理异常
可以没有finally
异常发生时，之后的代码不再执行,直接执行catch
        try {
            String str = "123";
            int a = Integer.parseInt(str);  //若此处异常
            System.out.println(a);          //这里不再执行
        } catch (NumberFormatException e) {
            System.out.println(e.getMessage());
        }

若未发生异常，跳过catch
如果希望一定执行，加上finally
    发生异常：跳过异常后代码，执行catch，再执行finally

可以有多个catch语句
父类异常在后（Exception)，子类在前(NullPointerException)，如果发生异常，只匹配一个catch

       try {
            Person person = new Person("jack");
            person = null;
            System.out.println(person.getName());
            int n = 10 / 0;
        }catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }catch (ArithmeticException e){
            System.out.println(e.getMessage());
        }catch(Exception e) {
            System.out.println(e.getMessage());
        }finally {
        }

catch也可以省略
只保留try-finally，但没有捕获异常，程序会崩溃
                  package exceptions.try_;

                  public class TryCatchDetail03 {
                      public static void main(String[] args) {
                          try {
                              int res = 10 / 0;
                              System.out.println(res);
                          } finally {
                              System.out.println("finally");
                          } 
                          //JVM直接中断程序，后面的语句不会执行
                          System.out.println("res");
                      }
                  }


p451 课堂练习
finally{return 5;} 会覆盖之前所有的return
String[] names = new String[3];
if(names[0].equals("tom"))  空指针异常


package exceptions.try_;

public class TryExercise {
    public static int method(){
        int i =1;
        try {
            i++;  //i=2
            int res = 10/0;
            return 1;
        } catch (ArithmeticException e) {
            return ++i;       //i=3,但不返回，因为finally中有return
        }finally {
             return ++i;  //i=4,返回
//            System.out.println(i);
        }
    }

    public static void main(String[] args) {
        System.out.println(method());
    }
}


public class TryExercise {
    public static int method(){
        int i =1;
        try {
            i++;
            int res = 10/0;
            return 1;
        } catch (ArithmeticException e) {
//            return ++i;
            return i++;          //1.  有return 但下面还有finally，所以先存储temp=i=2, i自增=3
                                  //4. 从此处返回temp=2 main中输出2    
        }finally {
//             return ++i;
            ++i;                     //2.            i=4
            System.out.println(i);//3.   输出4
        }
    }

    public static void main(String[] args) {
        System.out.println(method());
    }
}



p452
若用户输入不是整数，就提醒反复输入，直到输入一个整数

package exceptions.try_;

import java.util.Scanner;

public class TryCatchExercise04 {
    public static void main(String[] args) {
        /*
            1.scanner
            2.创建无线循环接收输入
            3.将输入值转成int
            4.转换时抛出异常则继续
            5.没有异常break
         */
        Scanner scanner = new Scanner(System.in);
        int n = 0;
        String next = "";
        while(true){
            System.out.println("input integer:");
            next = scanner.next();
            try {
                n = Integer.parseInt(next);//可能抛出异常
                break;
            } catch (NumberFormatException e) {
                System.out.println("input not integer");
            }
        }
        System.out.println(n);
    }
}


















