p398 抽象类
父类方法需要声明但不确定实现，可以声明为抽象方法，该类为抽象类

抽象方法就是没有实现的方法，没有方法体（不带大括号）
方法声明为abstract时，类也需要声明为abstract
abstract class A{
public abstract void eat();}

一般抽象类会被继承，子类实现方法


p399 细节
价值在于设计，具体实现由子类完成

1.抽象类不能实例化
2.抽象类可以没有抽象方法，可以有实现方法
3.一旦类包含抽线方法，就必须声明为抽象类
4.abstract只能修饰类和方法


p400
5.抽象类还是类，可以有任意成员
6.抽象方法不能有主体，不能实现
7.如果A类继承了抽象类B，A必须实现B的所有抽象方法，除非A也是抽象类
    实现即有方法体（可以是空的方法体{}）
8.抽象方法不能使用private final static修饰，因为这三种都不能被重写
    private：子类无法访问，私有方法不能重写
    final：子类无法继承
    static：必须有方法体，和重写无关


p401 抽象类练习


p402 模板模式

1.有多个类，完成不同的任务job
2.统计得到各自完成任务的时间


父类：模板
    job：抽象方法
    timer方法
A B C继承timer，并重写各自的job

      package abstract_;

      abstract public class Template {
          public  abstract void job();
          public void Timer(){
              long start = System.currentTimeMillis();
              job();
              long end = System.currentTimeMillis();
              System.out.println("time = " + (end-start));
          }
      }
      class A extends Template{
          public  void job(){
              long res = 0;
              for (int i = 1; i <= 1000000; i++) {
                  res += i;
              }
          }
      }
      class B extends Template{
          public  void job(){
              long res = 0;
              for (int i = 1; i <= 800000; i++) {
                  res += i;
              }
          }
      }

public class TestTemplate {
    public static void main(String[] args) {
//        AA aa =new AA();
//        aa.job();
//        BB bb = new BB();
//        bb.job();
        A a = new A();
        a.Timer();
        B b = new B();
        b.Timer();
    }
}

    



p403 接口
定义接口和相关规范：
                package interface_;

                public interface UsbInterface {
                    //规定接口的相关方法
                    public void start();
                    public void end();
                }

让类实现接口
                //实现Usb接口的方法
                public class Phone implements UsbInterface{
                    @Override
                    public void start() {
                        System.out.println("phone starts working");
                    }

                    @Override
                    public void end() {
                        System.out.println("phone ended working");
                    }
                }

通过接口调用方法
                public class Computer {
                    public void work(UsbInterface usbInterface){
                        usbInterface.start();
                        usbInterface.end();
                    }
                }
主程序：
                public class Interface01 {
                    public static void main(String[] args) {
                        Phone phone = new Phone();
                        Computer c = new Computer();
                        c.work(phone);//手机接入电脑
                        //输出：phone starts working；phone ended working；
                    }
                }



p404 接口介绍

接口给出一些没实现的方法，封装在一起，某个类要使用时，根据具体情况写方法

interface 接口名{
    属性；
    方法（抽象，默认，静态
    }
class 类名 implements 接口名{
    自己属性方法；
    必须实现接口所有抽象方法
}
            package interface_;

            public interface AInterface {
                public int n1 = 10;
                public void h1();
                //default 修饰 默认方法
                default public void ok(){
                    System.out.println("ok");
                }
                public static void cry(){
                    System.out.println("cry");
                }
            }


p405 接口
链接数据库
DBinterface connect，close
DBmysql DBoracle DBDB2 三个类分别实现接口，至少方法名统一
在test中分别创建三个对象

定义接口：
                package interface_.dbinterface;

                public interface DBinterface {
                    public void connect();
                    public void close();
                }
具体工作类：
  程序1：   public class MysqlDB implements DBinterface {
                @Override
                public void connect() {
                    System.out.println("connect mysql");
                }
                @Override
                public void close() {
                    System.out.println("close mysql");
                }
            }
  程序2：    public class OracleDB implements DBinterface {
                @Override
                public void connect() {
                    System.out.println("oracle connected");
                }

                @Override
                public void close() {
                    System.out.println("oracle closed");
                }
            }
主程序：
public class DBwork {
    public static void main(String[] args) {
        MysqlDB mysqlDB = new MysqlDB();
        t(mysqlDB);
    }
    public static void t(DBinterface db){
        db.connect();
        db.close();
    }
}


p406 接口细节
1.接口不可实例化，需要别的类实现，然后实例化这个类
2.接口中所有方法public，抽象方法不需要abstract修饰
3.一个类实现接口就必须实现接口所有方法除非是抽象类

p407
4.一个类可以同时实现多个接口，但只能继承一个类
5.接口属性 public static final
6.接口属性访问 接口名.属性名
7.接口不能继承其他类，但可以继承多个别的接口
8.接口修饰符只能是默认或public


p408 接口练习
interface A{ int a =23;}
class B implements A{}
main{B b = new B(); 
        sout(b.a);
        sout(A.a);
        sout(B.a);
        
        
p409 接口vs继承
extends只能单继承，老鼠儿子会打洞
interface 是对单继承的补充，老虎向猫学爬树

                        package interface_;

                        class Monkey{
                            public void climb(){
                                System.out.println("climbing");
                            }
                        }
                        interface Fish{
                            void swim();
                        }
                        interface Bird{  
                            void fly();
                        }
                        class LittleMonkey extends Monkey implements Fish,Bird{
                            @Override
                            public void swim() {
                                System.out.println("swiming");
                            }
                            @Override
                            public void fly() {
                                System.out.println("flying");
                            }
                        }
                        public class InterfaceDetail {
                            public static void main(String[] args) {
                                LittleMonkey littleMonkey = new LittleMonkey();
                                littleMonkey.fly();
                                littleMonkey.swim();
                                littleMonkey.climb();
                            }
                        }

不同点：
1. 继承解决复用性和可维护性
   接口设计各种规范，更加灵活
2. 继承满足is-a
   接口满足like-a
3. 接口实现代码解耦合（接口规范性+动态绑定）


p410 接口多态
接口多态特性：
1.参数：public void work(UsbInterface usbInterface) 
    可以接收所有实现了UsbInterface接口的类的对象，phone，camera。。

            interface IF{}
            class Monster implements IF{}
            class Car implements IF{}

            IF if01 = new Monster();//接口类型的变量指向实现了接口的类的对象
            if01 = new Car();


2.多态数组
                public class InterfacePolyArray {
                    public static void main(String[] args) {
                        Usb[] usbs = new Usb[2];
                        usbs[0] = new iPhone();
                        usbs[1] = new Camera();
                        for (int i = 0; i < usbs.length; i++) {
                            usbs[i].work();
                            if(usbs[i] instanceof iPhone){
                                ((iPhone) usbs[i]).call();
                            }
                        }
                    }
                }
                interface Usb{
                    void work();
                }
                class iPhone implements Usb{
                    public void call(){
                        System.out.println("calling");
                    }

                    @Override
                    public void work() {
                        System.out.println("phone work");
                    }
                }
                class Camera implements Usb{
                    @Override
                    public void work() {
                        System.out.println("camera work");
                    }
                }


p411 多态传递

public class InterfacePolyPass {
    public static void main(String[] args) {
        //接口类型变量可以指向，实现接口的类的对象
        IG ig = new Teacher();
        //若IG继承了IH，Teacher实现了IG，相当于Teacher也实现了IH,
        //Teacher也要实现IH的所有方法
        IH ih = new Teacher();
    }
}

interface IH{}
interface IG extends IH{}
class Teacher implements IG{}


p412 接口练习

interface A{int x= 0;}
class B{int x = 1;}
class C extends B implements A{
    public void pX(){
        //sout(x);     //ERROR，x混淆
        //明确指定x
        sout(A.x);sout(super.x);
    }
    public static void main(String[] args){
        new C().pX();
    }
}



类：

package 包名
class 类名 extends 父类 implements 接口名{
成员变量/属性;（静态、非静态）
构造器
成员方法;
代码块
}

五大成员
1.属性
2.方法
3.构造器
4.代码块
5.内部类





























