p425 枚举
11章：
枚举介绍
自定义类实现枚举
enum关键字实现枚举
JDK内置基本注解类型
元注解:对注解进行注解


要求创建Season对象
class Season{
private String name; private String desc;
}

        //季节由固定的四个对象，有限而固定
        //不应该让用户再创建新的对象
        //-->枚举类，将有限的具体对象一个个列举出的类
        
        
        
p426 自定义枚举
枚举时一组常量的集合
枚举类只包含一组有限的特定对象
实现：
1.自定义
2.enum


自定义：
//1.构造器私有，防止创建新对象
//2.去除setter，防止属性被修改
//3.定义常量对象，用static final 修饰 对外暴露 public
对象名全大写
对象可以有多个属性

            class Season{
                private String name;
                private String desc;

                //定义了四个对象
                public final static Season SPRING = new Season("spring", "warm");
                public final static Season SUMMER = new Season("summer", "hot");
                public static final Season AUTUMN = new Season("autumn", "chilly");
                public static final Season WINTER = new Season("winter", "cold");

                private Season(String name, String desc) {
                    this.name = name;
                    this.desc = desc;
                }

                public String getName() {
                    return name;
                }

                public String getDesc() {
                    return desc;
                }
            }





p427 enum关键字

enum 替代class
在属性定义之前定义对象：
SPRING("spring", "warm"),SUMMER("summer", "hot"),AUTUMN("autumn", "chilly"),WINTER("winter","cold");
private String name;
private String desc;


p428 细节
用enum时，默认继承Enum类
传统的public static final Season SPRING = new Season("spring", "warm")简化为SPRING("spring", "warm")
这里必须明确使用的构造器
若为无参构造器，则实参列表和小括号全部省略

多个枚举对象用,间隔
枚举对象必须在枚举类首行

        enum Season2{
            SPRING("spring", "warm"),SUMMER("summer", "hot"),
            AUTUMN("autumn", "chilly"),WINTER("winter","cold"),
            WHAT;
            private String name;
            private String desc;

            private Season2(String name, String desc) {
                this.name = name;
                this.desc = desc;
            }
            private Season2(){}
        }


p429 练习

enum Gender{
BOY, GIRL;
} //无参构造器被省略

Enum类的toString只返回枚举对象名




p430 枚举常用方法
        public class EnumMethod {
            public static void main(String[] args) {
                //以Season2演示Enum类的常用方法
                Season2 autumn = Season2.AUTUMN;
                //name输出对象名
                System.out.println(autumn.name());
                //ordinal输出对象次序
                System.out.println(autumn.ordinal());
                //values 返回定义的所有对象，数组
                Season2[] values = Season2.values();
                //遍历枚举类对象，增强for循环
                for(Season2 season: values){
                    System.out.println(season);
                }
                //valueOf 字符串匹配枚举对象,找不到就报错
                Season2 autumn1 = Season2.valueOf("AUTUMN");
                System.out.println("autumn1 = " + autumn1);
                //compareTo比较两个枚举常量的编号,返回常量1编号-常量2编号
                System.out.println(Season2.AUTUMN.compareTo(Season2.SPRING));
            }
        }




p431 枚举练习

        package enum_;

        public class EnumerationExercise {
            public static void main(String[] args) {
                //获取枚举类对象
                Week[] values = Week.values();
                for(Week week:values){
                    System.out.println(week);
                }
            }
        }
        enum Week{
            MONDAY("1"),TUESDAY("2");
            private String name;

            private Week(String name) {
                this.name = name;
            }

            @Override
            public String toString() {
                return name;
            }
        }



p432 枚举实现接口

使用enum关键字，不能继承别的类，java单继承
但依然可以实现接口




p433 注解 Annotation
Metadata元数据 
不影响程序逻辑
@Override：限定某个方法，重写父类方法
@Deprecated：表示某个程序元素已经过时
@SupressWarning：抑制编译器警告
@interface  注解类
    public @interface Override{} 表示Override是一个注解类

@Override 
编译器会检查该方法是否确实重写了父类的方法（语法校验
如果重写，则通过
如果不构成重写，报错


p434 
@Override只能注解方法
    @Target(ElementType.METHOD)  
@Target 是注解的注解，元注解



@Deprecated：
class A{}

A类已经过时，不推荐使用，但仍然可以使用

可以修饰 方法method，类Type，构造器，属性field，包，参数parameter

用于版本过度

p435 @SuppressWarning

作用域与放置的位置有关
                        package annotation;

                        import java.util.ArrayList;
                        import java.util.List;
                        //@SuppressWarnings({"all"})
                        public class SuppressWarning_ {
                        //    @SuppressWarnings({"rawtypes","unchecked","unused"})
                            public static void main(String[] args) {
                                @SuppressWarnings({"rawtypes"})
                                List list = new ArrayList();
                                list.add("jack");
                                list.add("tom");
                                list.add("mary");
                                @SuppressWarnings({"unused"})
                                int i;
                                System.out.println(list.get(1));
                            }
                        }
                        //当我们不想看到警告，可以用SuppressWarning抑制



p435 元注解
@Retention   注解作用范围，指定annotation保留的时间
@target      注解能够修饰的程序元素
@Documented  被javadoc生成文档时可以看到该注解
@Inherited   annotation将有继承性，某个类使用了该注解，子类将继承该注解








