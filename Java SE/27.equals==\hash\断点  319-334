==:比较基本数据的值和引用类型的地址（同一个对象时true
equals:比较引用类型的地址
  重写后：比较对象的内容

查看源码CTRL+B

hashcode
toString
finalize


p328 断点调试debug

p329 debug01


p330 数组越界异常
     debug02
        int[] arr = {1, 10, -1};
        for(int i = 0; i <= arr.length; i ++){
            System.out.println(arr[i]);
        }

p331 追踪源代码

    int[] arr = {1,-1,10,-20,100};
        Arrays.sort(arr);
   追踪sort源码：
        f7跳入方法体内
        shift+f8 跳出方法（方法执行完毕

p332 执行到下一个断点f9
可以在自己的代码下断点
也可以在jdk的代码中下断点
在分支结构中下断点也可以帮助判断分支路径


p333 实例 追踪一个对象的创建过程

              package com.sean.debug;

              public class DebugExercise {
                  public static void main(String[] args) {
                      Person jack = new Person("jack", 10);
                      System.out.println(jack);
                  }
              }
              class Person{
                  private String name;
                  private int age;

                  public Person(String name, int age) {
                      this.name = name;
                      this.age = age;
                  }
              }



p334 断点-动态绑定
              package com.sean.poly.dynamic;

              public class DynamicBinding {
                  public static void main(String[] args) {
                      A a = new B();
                      System.out.println(a.sum()); //40->30
                      System.out.println(a.sum1());//30->20
                  }
              }
              class A{
                  public int i =10;
                  //调用方法时会和运行类型绑定
                  public int sum(){
                      return getI() + 10;//调用B的getI()=20+10=30
                  }
                  public int sum1(){
                      return i+10;
                  }
                  public int getI(){
                      return i;
                  }
              }
              class B extends A{
                  public int i =20;
              //    public int sum(){
              //        return i + 20;
              //    }
                  public int getI(){
                      return i;
                  }
              //    public int sum1(){
              //        return i+ 10;
              //    }
              }
