p156  
养鸡场六只鸡的体重


p157
数组：存放多个同一类型的数据
数组本身也是一种数据类型，是引用类型
本质：一组数据
可以通过for循环遍历
可以用数组名.length访问数组大小

double[] hens = {3,5,1,2,3.4,50};
double hens[] = {3,5,1,2,3.4,50};
表示存放double类型的数组，数组的名称为hens，{}依次为数组的值

for (int i = 0; i <６；i++){
  hens[i]//遍历数组元素
}
hens.length 数组大小（元素数量
                    public class Array01{
                      public static void main(String []args) {
                        double[] hens = {3,5,1,2,3.4,50, 90, 80};
                        double total = 0;
                        int len = hens.length;
                        for (int i = 0; i < len ; i++){
                          total += hens[i];
                          //System.out.println("No."i+1 + " weight is " + hens[i]);
                        }
                        double ave = total/len;
                        System.out.println(ave);
                      }
                    }




p158 数组使用
动态初始化
int a[] = new int[5] 创建了一个数组a，存放5个int数值

数组引用\访问\元素获取
Array[index]

输入5个成绩，存储在
                              import java.util.Scanner;
                              public class Array02{
                                public static void main(String []args) {
                                  double[] scores = new double[5];
                                  Scanner myScanner = new Scanner(System.in);
                                  for (int i=0; i<5; i++){
                                    System.out.println("plz input score:");
                                    scores[i] = myScanner.nextDouble();
                                  }
                                  System.out.println("elements of the Array scores are");
                                  for (int i = 0; i < 5; i ++){
                                    System.out.print( scores[i]+ " ");
                                  }
                                }
                              }




p159 
动态初始化
先声明 int a[]/int[] a   空指针，未分配空间
再创建 a = new int[10]   分配内存空间



p160
静态初始化
int a[] = {1, 1, 1, 2, 3};  一般用于元素较少且确定的情况

double scores[] = {15,15,15,15,15};
相当于
double scores[] = new double[5];
scores[0]=15;scores[1]=15;scores[2]=15;scores[3]=15;scores[4]=15



p161数组注意事项
同一类型数据统一管理
类型不能混用
未赋值数组有默认值 
    short[] arr4 = new short[4];
    byte/short/int 0
    float/double 0.0 
    string null 
    char \u0000 
    boolean false

数组是引用类型，数组型数据本质是对象（object



p162 数组应用
输出字母表
强制转换'A'+1
                public class ArrayExercise{
                  public static void main(String []args) {
                    char[] arpb = new char[26];
                    //'A'+1='B'
                    for (int i =0; i< arpb.length; i++){
                      arpb[i] = (char)('A' + i);
                      System.out.print(arpb[i]+" ");
                    }
                  }
                }



p163 数组最大值
假定arr[0]最大， maxIndex = 0
从1开始遍历，若max<当前元素arr[i]：
  max=arr[i]，maxIndex = i
                            public class ArrayExercise{
                              public static void main(String []args) {
                                int[] arr ={4,-1,9,0,10,23};
                                int max = arr[0];
                                int maxIndex = 0;
                                for (int i =1; i<arr.length; i++){
                                  if(max<arr[i]){
                                    max = arr[i];
                                    maxIndex= i;
                                  }
                                }System.out.print(max +"\n"+ maxIndex);
                              }
                            }




p164 数组赋值机制
基本数据类型赋值是具体数值，互不影响(值拷贝)
数组是引用类型，地址拷贝（引用传递）
    int[] arr1 = {1,2,3};
    int[] arr2 = arr1;
    arr2[1] = 80;     //arr1[1]=80  引用


p165 引用传递

JVM内存：栈，堆，方法区
int n1 = 10  n1->[10]
int n2 = n1  n2->[10]
n2 = 80      n2->[80]

int[] arr1 = {1,2,3};    栈  arr1->0x0011          堆 0x0011 
                                                   [1][2][3]
int[] arr2 = arr1;       栈  arr2->0x0011          堆 0x0011
                                                   [1][2][3]
arr2[0] = 80;            堆  0x0011
                            [80][2][3]





p166 数组拷贝
实现数组拷贝，要求数据空间独立
				public class ArrayCopy {
				    public static void main(String []args) {
					int[] arr1 = {10,20,30};             //arr1->0x0011
					int[] arr2 = new int[arr1.length];   //arr2->0x0022
					//arr1->arr2
					for(int i = 0; i< arr1.length; i++){
						arr2[i] = arr1[i];
					}
					arr2[0] = 80;
					System.out.println("=====arr1 element=====");
					for (int i = 0; i < arr1.length; i ++){
						System.out.print(arr1[i] + " ");
					}
					System.out.println("\n=====arr2 element=====");
					for (int i = 0; i < arr2.length; i ++){
						System.out.print(arr2[i] + " ");
					}
				    }
				}



p167 数组反转
arr = {1,2,3,4,5,6};
1.arr[0] arr[5] exchange 
2.arr[1] arr[4] exchange
3.arr[2] arr[3] exchange
一共交换3次=length/2
交换下标为arr[i] arr[arr.length-1-i]
exchange: a=b;b=c;c=a;

					public class ArrayReverse {
					    public static void main(String []args) {
						int[] arr = {11,22,33,44,55,6};
						int len = arr.length;
						for(int i = 0; i< len/2;i++){
							int temp = arr[len-i-1];
							arr[len-1-i] = arr[i];
							arr[i] = temp;
						}
						for(int i = 0; i< len;i++){
							System.out.print(arr[i] + " ");
						}
					    }
					}



p168 数组反转2
1.创建新数组arr2
2.逆序遍历arr1，每个元素拷贝到arr2
3.增加一个循环变量j标识arr2的下标
4.让arr指向arr2的空间，此时arr原来的空间会成为垃圾被销毁

				public class ArrayReverse02 {
				    public static void main(String []args) {
					int[] arr = {11,22,33,44,55,6};

					int len = arr.length;
					int[] arr2 = new int[len];
					for(int i = len-1,  j = 0; i>=0; j++, i--){
						arr2[j]= arr[i];
					}
					arr = arr2; // arr 指向arr2的数据空间，原空间销毁
					for(int i = 0; i< len;i++){
						System.out.print(arr2[i] + " ");
					}
				    }
				}



p169  数组添加
动态的给数组添加元素效果，实现扩容 ArrayAdd
原始数组静态分配 int[] arr = {1,2,3};
增加4进入数组
用户可以决定是否继续添加

1.新建一个len+1的数组
2.copy arr到arr2，添加4到arr2
3.令arr指向arr2
			public class ArrayAdd{
			    public static void main(String []args) {
				int[] arr = {1,2,3};//static assignment
				int len = arr.length;
				int[] arr2 = new int[len+1];
				for(int i = 0; i< len; i ++){
					arr2[i]  = arr[i];
				}
				arr2[len] = 4;
				arr = arr2;
				for(int i = 0; i <=len;i++){
					System.out.print(arr[i]+ " ");
				}
			    }
			}



p170 数组添加2
用户决定动态添加
1.scanner接收用户输入
2.用户什么时候退出不确定，使用do-while break控制
					import java.util.Scanner;
					public class ArrayAdder{
					    public static void main(String []args) {
						Scanner myScanner = new Scanner(System.in);
						int[] arr = {1,2,3};//static assignment
						do{
							int len = arr.length;
							int[] arr2 = new int[len+1];
							for(int i = 0; i< len; i ++){
								arr2[i]  = arr[i];
							}
							System.out.print("input number to add:");
							int addNum = myScanner.nextInt();
							arr2[len] = addNum;
							arr = arr2;
							System.out.print("===========arr========\n");
							for(int i = 0; i <=len;i++){
								System.out.print(arr[i]+ "\t");
							}
							System.out.print("\nwanna add?");
							char ans = myScanner.next().charAt(0);
							if(ans == 'n'){
								break;
							}
						}while(true);
						System.out.print("Adder quited.");
					    }
					}



p171 数组缩减








