p215.递归概述
汉诺塔
迷宫
八皇后

p216 递归调用
public void test(int n){
		if(n>2){
			test(n-1);
		}
		System.out.println(n);}

main->test(4)->test(3)->test(2)
print(4)<--print(3)<--print(2)


p217 递归调用

p218 阶乘

  public class Recursion01 {
      public static void main(String []args) {
        T t1 = new T();
        t1.test(4);
        int n = t1.factorial(5);System.out.println(n);
    }
  }
  class T{
    public void test(int n){
      if(n>2){
        test(n-1);
      }
      System.out.println(n);
    }
    //阶乘
    public int factorial(int n){
      if(n==1){
        return 1;
      }else{
        return factorial(n-1)*n;
      }
  }}
 
 
 
p219 递归规则
执行一个方法时会创建一个新的独立栈空间
方法的局部变量是独立的，不相互影响
方法中使用引用类型，则会共享引用类型的数据
递归必须向退出递归的条件逼近，否则会栈溢出StackOverflow
当一个方法执行完毕或遇到return就会返回给调用方（可以是main或者别的方法）


p220 斐波那契

      public class RecursionExercise01 {
        public static void main(String []args) {
          T t1 = new T();
          int n = t1.fab(4);
          System.out.println(n);
        }
      }
      class T{
        public int fab(int n){
          if(n<=2){
            return 1;
          }else{
            return fab(n-1)+fab(n-2);
          }
      }}
 

p221 猴子吃桃
第一天吃了一半多一个，每天都吃了一半多一个，第10天还没吃，发现只剩一个桃子，最初总共多少桃子？
public int peach(int day){
		if(day == 10){
			return 1;
		}else{
			return (peach(day+1)+1)*2;
		}
 


p222 迷宫地图


p223 迷宫解题

递归回溯
输入：
  public boolean findWay(int[][] map, int i, int j) 
  输入地图map，初始位置ij
递归退出条件：
  0可以走，1表示障碍，2表示可以走，3表示走过但是思路
  当map[6][5]=2时，退出递归
寻路策略：
  下-右-上-左
 
 map[i][[j] == 1：不是路
 map[i][[j] == 2：回头路
 map[i][[j] == 3：死路
 
 
 /*public class MiGong {
    public static void main(String []args) {
public class MiGong {
    public static void main(String []args) {
		//make MiGong by Array
		int[][] map =new int[8][7];
		for(int i =0; i<7;i++){
			map[0][i] = 1;
			map[7][i] = 1;
		}
		for(int j = 0; j < 8; j++){
			map[j][6] = 1;
			map[j][0] = 1;
		}
		map[3][1]=1;map[3][2] = 1;
		T t1 = new T();
		t1.Map(map);
		t1.findWay(map,1,1);
		//System.out.println("====find map=====");
		//t1.Map(map);
	}
}
class T{
	public boolean findWay(int[][] map, int i, int j){Map(map);
		if(map[6][5] == 2){
			return true;
		}else{
			if(map[i][j] == 0){
				map[i][j] = 2;
				if (findWay(map, i+1,j)){return true;}
				else if(findWay(map,i,j+1)){return true;}
				else if(findWay(map,i-1,j)){return true;}
				else if(findWay(map,i,j-1)){return true;}
				else{map[i][j] = 3; return false;}
			}else{
				return false;//1,2,3
			}
		}
	}
	public void Map(int[][] map){
		System.out.println("====map=====");
		for(int i =0; i< map.length;i++){
			for(int j= 0; j<map[i].length;j++){
				System.out.print(map[i][j]+" ");
			}System.out.println();
		}
	}
}

1 1 1 1 1 1 1
1 2 0 0 0 0 1
1 2 2 2 0 0 1
1 1 1 2 0 0 1
1 0 0 2 0 0 1
1 0 0 2 0 0 1
1 0 0 2 2 2 1
1 1 1 1 1 1 1

p224 修改找路策略 findWay2
上-右-下-左
1 1 1 1 1 1 1
1 2 2 2 2 2 1
1 0 0 0 0 2 1
1 1 1 0 0 2 1
1 0 0 0 0 2 1
1 0 0 0 0 2 1
1 0 0 0 0 2 1
1 1 1 1 1 1 1
 

p225  回溯现象
假设map[2][2]=1,下右上左，再map[2][1]=3，出现回溯，
 
 
p226  汉诺塔
不论有几个盘子，将最下面看作一个，上面所有盘子看作一个
public class HanoiTower {
    public static void main(String []args) {
		Tower tower = new Tower();
		tower.move(1,'A','B','C');
	}
}
class Tower{
	//a b c 表示从a经过b放到c
	public void move(int num,char a, char b, char c){
		if(num == 1){//只有一个盘子
			System.out.println(a+"->"+c);		//直接从a移动到c
		}else{
			// 上面的所有盘子从a移动到b，经过c
			move(num-1, a,c,b);
			// 最下面的盘子从a移到c
			System.out.println(a+"->"+c);
			// 上面的盘子再从b移动到c
			move(num-1, b,a,c);
		}
	}
}


p227  八皇后问题

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
