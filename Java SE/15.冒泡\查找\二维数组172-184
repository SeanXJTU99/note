p172 冒泡排序
内部排序：数据量不大，可以全部加载到内存中
外部排序：大数据处理，需要将数据暂存在外存中

冒泡（bubble sorting）：
对数组两两比较

p173
int[] arr = {24,90,69,80,70};
排列为从小到大
第一轮排序：将max放在最后len-1
  第1次比较：24，90，不交换
  第2次比较：90，69，交换 {24，69，90，80，70}
  第3次比较：90，80，交换 {24，69，80，90，70}
  第4次比较：90，70，交换 {24，69，80，70，90}
第二轮排序：将max2放在len-2
  第1次比较：24，69，不交换
  第2次比较：69，80，不交换
  第3次比较：80，70，交换 {24，69，70，80，90}
第三轮排序：将max3放在len-3
  第1次比较：24，69，不交换
  第2次比较：69，70，不交换
第四轮排序：将max4放在len-4
  第1次比较：24，69，不交换
 
p174 冒泡实现
                    public class BubbleSort{
                        public static void main(String []args) {
                          int[] arr = {6,5,4,3,2,1};
                          int len = arr.length-1;
                          for(int j = 0; j < len;j++){
                            for(int i = 0; i < len-j;i++){//4times
                              if(arr[i] > arr[i+1]){
                                int temp = arr[i];
                                arr[i] = arr[i+1];
                                arr[i+1] = temp;
                              }
                            }
                            System.out.println("====="+j+"=====");
                            for(int i = 0; i < arr.length;i++)System.out.print(arr[i]+"\t");
                          }
                        }
                    }



p175 查找
顺序查找：遍历数组比较元素
二分查找：对有序数组二分查找
顺序：
  1.定义一个字符串数组
  2.接收用户输入，遍历数组，逐一比较
  3.遍历标识符index，表征遍历后没有匹配项
                          import java.util.Scanner;
                          public class SeqSearch{
                              public static void main(String []args) {
                                String[] names = {"name1","name2","name3","name4"};
                                Scanner myScanner = new Scanner(System.in);
                                System.out.println("input name plz");
                                String findName = myScanner.next();
                                int index = -1;
                                for(int i = 0; i < names.length; i ++){
                                  //equals
                                  if(findName.equals(names[i])){
                                    System.out.println("found name");
                                    System.out.println("index is "+i);
                                    index = i;
                                    break;
                                  }
                                }
                                if(index == -1){
                                  System.out.println("not found");
                                }
                              }
                          }




p176 二维数组
int[][] = arr{{},{},{},{},{}};
一维数组的元素也是一维数组，即为二维数组
arr.length 二维数组的长度
arr[i].length 一维数组的长度
访问 arr[i][j]
                    public class TwoDimensional {
                      public static void main(String []args) {
                        int[][] arr = {{0,0,0,0,0,0},{0,0,1,0,0,0},
                                 {0,2,0,3,0,0},{0,0,0,0,0,0}};
                        //output
                        for(int i = 0; i < arr.length; i++){//2D
                          for(int j = 0 ; j < arr[i].length; j++){
                            System.out.print(arr[i][j]+"\t");
                          }System.out.println();
                        }
                      }
                    }



p177 二维数组的使用
动态初始化
int[][] a = new int[2][3]
数据空间
    栈                         堆
arr->0x0011-------------->0x0011
                  arr[0]  0x0022----->0x0022 arr[0][0], arr[0][1], arr[0][2] 
                  arr[1]  0x0033----->0x0033 arr[1][0], arr[1][1], arr[1][2]



p178 
动态初始化
int arr[][];
arr[1][1] = 9;...


p179
列数不确定，即一维数组的元素可以不一样多
int[][] arr = new int[3][3]

                  public class TwoDimensionalArray03 {
                    public static void main(String []args) {
                      int[][] arr = new int[3][];
                      for(int i = 0; i < arr.length; i++){//2D
                        //every array new space
                        arr[i] = new int[i+1];
                        for(int j = 0 ; j < arr[i].length; j++){
                          arr[i][j] = i+1;
                        }
                      }
                      //output
                      for(int i = 0; i < arr.length; i++){//2D
                        for(int j = 0 ; j < arr[i].length; j++){
                          System.out.print(arr[i][j]+"\t");
                        }System.out.println();
                      }
                    }
                  }



p180 静态初始化
int[][] arr = {{1,1,1},{8,8,9},{100}};
定义了一个二维数组
第三个一维数组元素含有一个数值
{100}不能写为100


p181
二维数组遍历求和
int[][] arr = {{4,6},{1,4,5,7},{-2}};

                        public class TwoDimensionalArray05 {
                          public static void main(String []args) {
                            int sum = 0;
                            int[][] arr = {{4,6},{1,4,5,7},{-2}};
                            for(int i = 0; i < arr.length; i++){
                              for(int j = 0 ; j < arr[i].length; j++){
                                sum += arr[i][j];
                              }
                            }
                            System.out.println(sum);
                          }
                        }



p182 杨辉三角
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
第i行有i个数
首尾都是1
a[i][j] = a[i-1][j] + a[i-1][j-1]，i>=3

                                public class YangHui {
                                  public static void main(String []args) {
                                    int[][] arr = new int[10][];
                                    for(int i = 0; i < arr.length; i++){//every line
                                      arr[i] = new int[i+1];
                                      for(int j = 0 ; j < arr[i].length; j++){//every element
                                        if(j==0||j==arr[i].length-1){
                                          arr[i][j] = 1;
                                        }else{
                                          arr[i][j] = arr[i-1][j] + arr[i-1][j-1];
                                        }
                                      }
                                    }
                                    for(int i = 0; i < arr.length; i++){//2D
                                      for(int j = 0 ; j < arr[i].length; j++){
                                        System.out.print(arr[i][j]+"\t");
                                      }System.out.println();
                                    }
                                  }
                                }
                                
  
  
p183 二维数组细节
1.声明：
一维数组： int[] x/ int y[];
二维数组： int[][] y / int[] y[] / int y[][]
2.
二维数组的各元素（一维数组）的长度可以不同


p184 二维数组练习
int[]x, y[]   x为一维数组，y为二维数组


