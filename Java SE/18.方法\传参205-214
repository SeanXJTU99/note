p205
为什么需要成员方法
需求：遍历十次一个数组，输出元素值    int[][] = map{{0,0,1},{1,1,1},{1,1,3}};
传统方法：代码冗余太多
成员方法：
class MyTools {
	public void printArr(int[][] map){
		for(int i =0;i<map.length;i++){
			for(int j=0; j < map[i].length; j++){
				System.out.print(map[i][j]+"\t");}
			System.out.println();}	}}
main:
int[][] map = {{0,0,1},{1,1,1},{1,1,3}};
		MyTools tool = new MyTools();
		tool.printArr(map);
		tool.printArr(map);
    
提高了代码的复用性
可以将实现细节封装起来，直接供其他用户调用，更多关注业务逻辑


p206  成员方法的定义

访问修饰符 返回数据类型 方法名（形参表）{//方法体
语句
return 返回值（可以没有 void)
}

public int getSum(int n){
..
return res;//res是int
}



p207  方法的细节

1.访问修饰符：public private protected 默认
    控制访问权限
2.返回数据类型:一个方法只能有一个返回值
    多个返回值可以返回数组
		public class Method03 {
		    public static void main(String []args) {
				AA a = new AA();
				int[] res = a.getSumAndSub(4,1);
				System.out.println(res[0]);System.out.println(res[1]); }}
		class AA{
			public int[] getSumAndSub(int n1, int n2){int[] resArr = new int[2];
			resArr[0] = n1+n2;resArr[1] = n1 - n2;	return resArr;	}}

3.若要求有返回数据类型，方法体最后必须为return，且类型一致或兼容
		public double f1(){double d1 =3; return d1;}//ok
		public int f1(){double d1=3;return d1;}//error double->int

4.若为void 可以没有return d1；或者只写return；
5.方法名getSum 驼峰规范，能体现方法功能



p208形参列表
1.形参列表数量不限，用逗号隔开getSum(int n1, int n2)
2.参数类型为任意类型，包括基本和引用类型printARR(int[][] map)
3.形参和实参必须是相同类型或兼容类型
		getSum(int n1, int n2){}
		byte b1=1; byte b2 =1; getSum(b1,b2) // ok  byte->int
4.方法定义时为形式参数，调用方法是实参，类型兼容，个数、顺序一致
		getSum(int n1, double d1){}
		int n1=1;double d1 = 1.0;getSum(d1,n1)//error
5.方法体：
具体执行功能的代码，不能再含有方法



p209 方法的调用
同一个类的方法可以直接调用

	class A{public void print(int n){
			System.out.println("print method is used." + n);}
		public void sayok(){
			print(10);  //直接调用A类方法print（）
			System.out.println("sayok method is used.");}}
跨类的方法：
A类调用B类方法：需要通过对象名调用，受访问修饰符和包的限制
	B类：
		class B{public void hi(){System.out.println("hi");}}
	A类调用B类的hi()：
		public void m1(){
				B b =new B(); //创建一个B类对象  此时栈空间多开辟一个空间
				b.hi();	}//通过b对象调用B的方法



p210 方法练习
AA方法：判断奇数偶数
		public class MethodExercise01 {
		    public static void main(String []args) {
				AA a = new AA();
				boolean b= a.isOdd(1);
				System.out.println(b);
				if(a.isOdd(2)){System.out.println("Odd");}else{System.out.println("Even");}   }}
		class AA{//return boolean	//name  isOdd	//args (int n)	//code
			public boolean isOdd(int n){//if(n%2 != 0){return true;}else{return false;}//return n % 2 !=0 ? true:false;
				return n%2 !=0;	}

行列数打印字符		a.print(4, 4, ',');
			public void print(int row, int column, char c){
				for(int i=0;i<row;i++){
					for(int j=0;j<column;j++){System.out.print(c);}System.out.println();}}



p211 传参机制（基本数据类型
		class AA{
		public void swap(int a,int b){
		System.out.println(a);
		int tmp=a;a=b;b=tmp;
		System.out.println(a);//20
		}}

		int a=10;int b= 20;          
		AA a= new AA();
		a.swap(a,b);
		System.out.println(a);//10
		System.out.println(b);


1.主栈 main
	a=10;b=20;obj->堆
	调用swap（a，b）a=10,b=20

2.swap栈
	a=10,b=20
	System.out.println(a); 输出a=10
	int tmp=a;a=b;b=tmp;
	System.out.println(a); 输出a=20
	a=20,b=10

3.主栈
	a=10 b=20
	System.out.println(a);输出主栈a=10

基本数据类型，形参传递的是值拷贝，形参的改变不影响实参



212 传参机制（引用类型
在B中写一个方法test100，可以接收一个数组，并在方法中修改数组
		public class MethodParameter02 {
		    public static void main(String []args) {
			B b= new B();
			int[] arr = {1,2,3};
			b.test100(arr);
			System.out.println("arr from main:");
			for(int i=0;i<arr.length;i++){System.out.println(arr[i]+"\t");}    }}
		class B{
			public void test100(int[] arr){
				arr[0] = 200;
				for(int i=0;i<arr.length;i++){System.out.println(arr[i]+"\t");}}}
引用类型传递的是地址，形参会影响实参

B中方法test200，接收一个Person对象，修改属性
		public class MethodParameter02 {
		    public static void main(String []args) {
				B b= new B();
				Person p = new Person();
				p.name = "jack";
				p.age = 10;
				b.test200(p);
				System.out.println(p.age);		}	}
		class B{
			public void test200(Person p)
			{p.age = 200;}	
			}
		class Person{int age; String name;}
对象存储在堆中，主栈中存贮的是指向对象的指针（对象名），

B方法test200参数Person p在B的test200栈中新建了一个指向main栈p的对象的新指针p，并通过p.age修改了属性


p213
若test200中p=null，test栈的p不再指向main栈的p对象，则对象属性不被修改
		class B{
			public void test200(Person p)
			{p=null;}	
			}
main:  System.out.println(p.age);  不会报错，输出10，对象属性不被修改。

若test中新建了一个完整的Person对象，不指向main栈的p，test返回后被回收，也不修改属性
class B{
	public void test200(Person p)
	{p = new Person(); p.age =200;}	
	}
main:  System.out.println(p.age);   



p214传参机制练习 克隆对象

copyPerson, 复制一个Person对象，返回复制的对象，但是两个独立的对象，只是属性相同

		public class MethodExercise02 {
		    public static void main(String []args) {
				B b= new B();
				Person p = new Person();
				p.name = "jack";
				p.age = 10;
				Person p2 = b.copyPerson(p);
				System.out.println(p2.age);
		    }
		}
		class B{
			public Person copyPerson(Person p){
				Person p2 = new Person();
				p2.name = p.name;
				p2.age = p.age;
				return p2;
			}
		}
		class Person{int age; String name;}











































